@page "/employees"
@using System
@using System.Linq
@inject MudBlazor.ISnackbar snackBar
@inject IJSRuntime JsRuntime
@inject HttpClient Http

<MudCard Elevation="25">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Employees</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <EditForm OnValidSubmit="Add" Model="@employee">
            <MudGrid>
                <MudItem xs="12" sm="4" md="6">
                    <MudTextField @bind-Value="employee.FirstName" Label="First Name"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="4" md="6">
                    <MudTextField @bind-Value="employee.LastName" Label="Last Name"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="4" md="6">
                    <MudTextField @bind-Value="employee.ManNumber" Label="Man Number"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="4" md="6">
                    <MudSelect T="int" Label="Select Department" @bind-Value="employee.DepartmentId">
                        @foreach (var department in departments)
                        {
                            <MudSelectItem T="int" Value="@department.DepartmentId">@department.DepartmentName</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </MudGrid>
            <br />
            <MudButton Color="Color.Info" Variant="Variant.Filled" OnClick="Add">Add Employee</MudButton>
        </EditForm>
    </MudCardContent>
</MudCard>
<br />

<MudTable Items="GetAll()" Filter="new Func<Employee, bool>(Search)" @bind-employee="employee">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Employees</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search For Employees"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>First Name</MudTh>
        <MudTh>Last Name</MudTh>
        <MudTh>Man Number</MudTh>
        <MudTh>Department</MudTh>
        <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="First Name">@context.FirstName</MudTd>
        <MudTd DataLabel="Last Name">@context.LastName</MudTd>
        <MudTd DataLabel="Man Number">@context.ManNumber</MudTd>
        <MudTd DataLabel="Department Name">@context.Department.DepartmentName</MudTd>
        <MudTd DataLabel="Actions">
            <MudFab OnClick="@(()=>Update(context))" Color="Color.Primary" Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small"></MudFab>
            <MudFab OnClick="@(()=>Delete(context))" Color="Color.Secondary" Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small"></MudFab>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    private string searchString = "";
    private Employee employee = new Employee();
    private Department department = new Department();
    private List<Employee> employees = new List<Employee>();
    private List<Department> departments = new List<Department>();

    protected override async Task OnInitializedAsync()
    {
        employees = await Http.GetFromJsonAsync<List<Employee>>("api/Employee");
    }

    private bool Search(Employee employee)
    {
        if (string.IsNullOrWhiteSpace(searchString)) return true;
        if (employee.FirstName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
           || employee.LastName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }

    private List<Employee> GetAll()
    {
        employees = employeeService.GetAll();
        return employees;
    }

    private async Task Add()
    {
        if (employee.EmployeeId == 0)
        {
            await Http.PostAsJsonAsync("api/Employee", employee);
            snackBar.Add("Employee Added", Severity.Success);
        }
        else
        {
            await Http.PutAsJsonAsync($"api/Employee/{employee.EmployeeId}", employee);
            snackBar.Add("Employee Updated", Severity.Success);
        }
        employee = new Employee();
        await OnInitializedAsync();
    }

    private void Update(Employee record)
    {
        employee = record;
        StateHasChanged();
    }

    private async Task Delete(Employee record)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            employeeService.Delete(record);
            snackBar.Add("Employee Deleted", Severity.Success);
            GetAll();
        }
    }
}
